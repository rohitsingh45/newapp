{"version":3,"sources":["Component/Navbar.js","Component/TextForm.js","Component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","navHead","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","style","width","defaultValue","value","onClick","toggleMode","role","htmlFor","TextForm","text","setText","useState","vowel","setVowelCount","jsx","setJsx","color","textarea","backgroundColor","rows","onChange","event","target","upperCaseClicked","newText","toUpperCase","alertIntoTextArea","lowerCaseClicked","toLowerCase","vowelConsCount","count","i","length","clearTextarea","jsxConverter","forHandler","replaceAll","result","includes","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpace","split","join","handlePaste","readText","then","copiedText","defaultProps","Alert","alert","word","val","charCodeAt","String","fromCharCode","substr","capitalize","msg","App","setMode","setAlert","showAlert","message","setTimeout","Fragment","body","setInterval","title","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.44ef7d19.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n\r\n  // use state variables for help to switch dark mode using buttons...\r\n  // Function to switch into dark mode using the buttons and event calling...\r\n\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode  /*Managing text color */} bg-${props.mode  /*Managing background color */}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"\" >{props.navHead}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\"  aria-current=\"page\" href=\"\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"\">About</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <button className=\"btn btn-primary mx-4\" onClick={switchDark} >{btnValue}</button> */}\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className={`btn btn-success`} type=\"submit\">Search</button>\r\n          </form> */}\r\n          <div className='container mx-5' style={{width:\"200px\"}}>\r\n            <select className={`form-select \r\n             bg-${props.mode} text-${props.mode==='light'?'dark':'light'}`}\r\n              id='select' aria-label=\"Default select example\" defaultValue=\"0\">\r\n              <option value=\"0\">Select the dark options</option>\r\n              <option value=\"1\">Black-Grey</option>\r\n              <option value=\"2\">Pink-Yellow</option>\r\n              <option value=\"3\">Black-Green</option>\r\n              <option value=\"4\">Red-Black</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div className={`form-check form-switch text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  navHead: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  navHead: 'default'\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n    const [vowel, setVowelCount] = useState(0);\r\n    const [jsx, setJsx] = useState(\"\");\r\n\r\n    const textareaChanged = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const upperCaseClicked = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n\r\n        props.alertIntoTextArea(\"Converted into upper case\", \"success\");\r\n    }\r\n\r\n    const lowerCaseClicked = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n\r\n        props.alertIntoTextArea(\"Converted into lower case\", \"success\");\r\n    }\r\n\r\n    const clearTextarea = () => {\r\n        if (!(text.length > 0)) return;\r\n        setText(\"\");\r\n        setVowelCount(0);\r\n        setJsx(\"\");\r\n\r\n        props.alertIntoTextArea(\"Text removed\", \"danger\");\r\n    }\r\n\r\n\r\n    const vowelConsCount = () => {\r\n        let count = 0;\r\n        for (let i = 0; i < text.length; i++) {\r\n            if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u') count++;\r\n            else if (text[i] === 'A' || text[i] === 'E' || text[i] === 'I' || text[i] === 'O' || text[i] === 'U') count++;\r\n        }\r\n        setVowelCount(count);\r\n        // return countVowel;\r\n    }\r\n\r\n    const jsxConverter = () => {\r\n        let classReplace = text.replaceAll('class=', 'className=');\r\n\r\n        let hrefHandler = classReplace.replaceAll('href=\"#\"', 'href=\"/\"');\r\n\r\n        let forHandler = hrefHandler.replaceAll('for=', 'htmlFor=');\r\n\r\n        setJsx(forHandler);\r\n\r\n        //Alert message and type...\r\n        // Since above JSX code handle only the three differeneces so for rest of them I want to show a warning alert along with message\r\n        // Otherwise show the success alert with message...\r\n        let result = text.includes('<input') || text.includes('<img') ? true : false\r\n        \r\n        props.alertIntoTextArea(result ? \"Converted but check the closing tags\":\"Converted into JSX code\",result ? \"warning\" : \"success\")\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        let text = document.getElementById('mybox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n\r\n        // Setting alert message and type....\r\n        props.alertIntoTextArea(\"Text Copied to Clipboard\",\"success\")\r\n    }\r\n\r\n    const handleExtraSpace = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n\r\n        // Setting alert message and type...\r\n        props.alertIntoTextArea(\"Extra spaces removed\", \"success\");\r\n    }\r\n\r\n    const handlePaste = () => {\r\n        navigator.clipboard.readText()\r\n            .then(copiedText => {\r\n                let newText = text + copiedText;\r\n                setText(newText);\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <div className=\"mb-3 container\">\r\n                <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label fw-bold\">{props.textarea}</label>\r\n                <textarea className=\"form-control border-black\" style={{backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode==='dark'?'white':'black' }} id=\"mybox\" rows=\"8\" value={text} onChange={textareaChanged}></textarea>\r\n                <button className='btn btn-primary my-2' onClick={upperCaseClicked}>Convert to upper case</button>\r\n                <button className=\"btn btn-success mx-3\" onClick={lowerCaseClicked}>Convert to lower case</button>\r\n                <button className=\"btn btn-info mx-3\" onClick={vowelConsCount}>Count V & C</button>\r\n                <button className=\"btn btn-danger\" onClick={clearTextarea}>Clear</button>\r\n                <button className=\"btn btn-warning mx-3\" onClick={jsxConverter}>Convert into JSX</button>\r\n                <button className=\"btn btn-primary\" onClick={handleCopy}>Copy</button>\r\n                <button className=\"btn btn-secondary mx-3\" onClick={handleExtraSpace}>Remove extra spaces</button>\r\n                <button className=\"btn btn-success\" onClick={handlePaste}>Paste</button>\r\n            </div>\r\n\r\n            <div className='container fw-bold'>\r\n                {  // Uses of ternary operator at the place of if else...\r\n                    text[text.length - 1] === \" \"\r\n                        ? text.split(\" \").length - 1\r\n                        : text.length === 0 ? 0 : text.split(\" \").length} words and {text.length} characters\r\n            </div>\r\n            <div className=\"container fw-bold my-2\">\r\n                {vowel} vowels and {vowel > 0 ? text.length - vowel : 0} Consonants\r\n            </div>\r\n\r\n            <div className=\"container\">\r\n                <h4 className='my-3'>Preview</h4>\r\n                <p>{text}</p>\r\n            </div>\r\n\r\n            <div className=\"container\">\r\n                <h4 className=\"my-3\">JSX code:- </h4>\r\n                <pre className=\"fw-bold\">\r\n                    {jsx}\r\n                </pre>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        let val = word.charCodeAt(0);\r\n        if (val >= 97 && val <= 122) {\r\n            val = val - 32;\r\n        }\r\n        let char = String.fromCharCode(val);\r\n        let remain = word.substr(1);\r\n\r\n        return char + remain;\r\n\r\n        \r\n    }\r\n    return (\r\n        props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Navbar from \"./Component/Navbar\";\r\nimport TextForm from \"./Component/TextForm\";\r\nimport Alert from \"./Component/Alert\";\r\nimport About from \"./Component/About\";\r\nimport React from 'react';\r\n// import { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\r\n\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const toggleMode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"grey\";\r\n      showAlert(\"Dark mode enabled\", \"success\");\r\n    } else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      showAlert(\"Light mode enabled\", \"success\");\r\n    }\r\n\r\n    setInterval(() => {\r\n      document.title = \"Welcome to Texter Editor\";\r\n    }, 1500);\r\n\r\n    setInterval(() => {\r\n      document.title = \"Texter - Home\";\r\n    }, 2000);\r\n  };\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type,\r\n    });\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1200);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <Router> */}\r\n      <Navbar navHead=\"Texter\" mode={mode} toggleMode={toggleMode} />\r\n      <Alert alert={alert} />\r\n        {/* <Routes> */}\r\n      {/* <Route exact path=\"/\" element={ */}\r\n        <TextForm textarea=\"Enter your text here\" mode={mode} alertIntoTextArea={showAlert} />\r\n{/* }/> */}\r\n          {/* <Route exact path=\"/about\" element={<About/>}/> */}\r\n        {/* </Routes> */}\r\n      {/* </Router> */}\r\n    \r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}