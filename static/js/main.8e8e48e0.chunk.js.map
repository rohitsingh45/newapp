{"version":3,"sources":["Component/Navbar.js","Component/TextForm.js","Component/Alert.js","Component/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","Link","to","navHead","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","style","width","defaultValue","value","onClick","toggleMode","role","htmlFor","TextForm","text","setText","useState","vowel","setVowelCount","jsx","setJsx","color","textarea","backgroundColor","rows","onChange","event","target","upperCaseClicked","newText","toUpperCase","alertIntoTextArea","lowerCaseClicked","toLowerCase","vowelConsCount","count","i","length","clearTextarea","jsxConverter","forHandler","replaceAll","result","includes","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpace","split","join","handlePaste","readText","then","copiedText","defaultProps","Alert","alert","word","val","charCodeAt","String","fromCharCode","substr","capitalize","msg","About","data-bs-parent","App","setMode","setAlert","showAlert","message","setTimeout","Fragment","Router","body","setInterval","title","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.8e8e48e0.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n\r\n  // use state variables for help to switch dark mode using buttons...\r\n  // Function to switch into dark mode using the buttons and event calling...\r\n\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode  /*Managing text color */} bg-${props.mode  /*Managing background color */}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\" >{props.navHead}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\"  aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <button className=\"btn btn-primary mx-4\" onClick={switchDark} >{btnValue}</button> */}\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className={`btn btn-success`} type=\"submit\">Search</button>\r\n          </form> */}\r\n          <div className='container mx-5' style={{width:\"200px\"}}>\r\n            <select className={`form-select \r\n             bg-${props.mode} text-${props.mode==='light'?'dark':'light'}`}\r\n              id='select' aria-label=\"Default select example\" defaultValue=\"0\">\r\n              <option value=\"0\">Select the dark options</option>\r\n              <option value=\"1\">Black-Grey</option>\r\n              <option value=\"2\">Pink-Yellow</option>\r\n              <option value=\"3\">Black-Green</option>\r\n              <option value=\"4\">Red-Black</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div className={`form-check form-switch text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  navHead: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  navHead: 'default'\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n    const [vowel, setVowelCount] = useState(0);\r\n    const [jsx, setJsx] = useState(\"\");\r\n\r\n    const textareaChanged = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const upperCaseClicked = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n\r\n        props.alertIntoTextArea(\"Converted into upper case\", \"success\");\r\n    }\r\n\r\n    const lowerCaseClicked = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n\r\n        props.alertIntoTextArea(\"Converted into lower case\", \"success\");\r\n    }\r\n\r\n    const clearTextarea = () => {\r\n        if (!(text.length > 0)) return;\r\n        setText(\"\");\r\n        setVowelCount(0);\r\n        setJsx(\"\");\r\n\r\n        props.alertIntoTextArea(\"Text removed\", \"danger\");\r\n    }\r\n\r\n\r\n    const vowelConsCount = () => {\r\n        let count = 0;\r\n        for (let i = 0; i < text.length; i++) {\r\n            if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u') count++;\r\n            else if (text[i] === 'A' || text[i] === 'E' || text[i] === 'I' || text[i] === 'O' || text[i] === 'U') count++;\r\n        }\r\n        setVowelCount(count);\r\n        // return countVowel;\r\n    }\r\n\r\n    const jsxConverter = () => {\r\n        let classReplace = text.replaceAll('class=', 'className=');\r\n\r\n        let hrefHandler = classReplace.replaceAll('href=\"#\"', 'href=\"/\"');\r\n\r\n        let forHandler = hrefHandler.replaceAll('for=', 'htmlFor=');\r\n\r\n        setJsx(forHandler);\r\n\r\n        //Alert message and type...\r\n        // Since above JSX code handle only the three differeneces so for rest of them I want to show a warning alert along with message\r\n        // Otherwise show the success alert with message...\r\n        let result = text.includes('<input') || text.includes('<img') ? true : false\r\n        \r\n        props.alertIntoTextArea(result ? \"Converted but check the closing tags\":\"Converted into JSX code\",result ? \"warning\" : \"success\")\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        let text = document.getElementById('mybox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n\r\n        // Setting alert message and type....\r\n        props.alertIntoTextArea(\"Text Copied to Clipboard\",\"success\")\r\n    }\r\n\r\n    const handleExtraSpace = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n\r\n        // Setting alert message and type...\r\n        props.alertIntoTextArea(\"Extra spaces removed\", \"success\");\r\n    }\r\n\r\n    const handlePaste = () => {\r\n        navigator.clipboard.readText()\r\n            .then(copiedText => {\r\n                let newText = text + copiedText;\r\n                setText(newText);\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <div className=\"mb-3 container\">\r\n                <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label fw-bold\">{props.textarea}</label>\r\n                <textarea className=\"form-control border-black\" style={{backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode==='dark'?'white':'black' }} id=\"mybox\" rows=\"8\" value={text} onChange={textareaChanged}></textarea>\r\n                <button className='btn btn-primary my-2' onClick={upperCaseClicked}>Convert to upper case</button>\r\n                <button className=\"btn btn-success mx-3\" onClick={lowerCaseClicked}>Convert to lower case</button>\r\n                <button className=\"btn btn-info mx-3\" onClick={vowelConsCount}>Count V & C</button>\r\n                <button className=\"btn btn-danger\" onClick={clearTextarea}>Clear</button>\r\n                <button className=\"btn btn-warning mx-3\" onClick={jsxConverter}>Convert into JSX</button>\r\n                <button className=\"btn btn-primary\" onClick={handleCopy}>Copy</button>\r\n                <button className=\"btn btn-secondary mx-3\" onClick={handleExtraSpace}>Remove extra spaces</button>\r\n                <button className=\"btn btn-success\" onClick={handlePaste}>Paste</button>\r\n            </div>\r\n\r\n            <div className='container fw-bold'>\r\n                {  // Uses of ternary operator at the place of if else...\r\n                    text[text.length - 1] === \" \"\r\n                        ? text.split(\" \").length - 1\r\n                        : text.length === 0 ? 0 : text.split(\" \").length} words and {text.length} characters\r\n            </div>\r\n            <div className=\"container fw-bold my-2\">\r\n                {vowel} vowels and {vowel > 0 ? text.length - vowel : 0} Consonants\r\n            </div>\r\n\r\n            <div className=\"container\">\r\n                <h4 className='my-3'>Preview</h4>\r\n                <p>{text}</p>\r\n            </div>\r\n\r\n            <div className=\"container\">\r\n                <h4 className=\"my-3\">JSX code:- </h4>\r\n                <pre className=\"fw-bold\">\r\n                    {jsx}\r\n                </pre>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        let val = word.charCodeAt(0);\r\n        if (val >= 97 && val <= 122) {\r\n            val = val - 32;\r\n        }\r\n        let char = String.fromCharCode(val);\r\n        let remain = word.substr(1);\r\n\r\n        return char + remain;\r\n\r\n        \r\n    }\r\n    return (\r\n        props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div className='mb-3 container'>\r\n            <h3>About us</h3>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./Component/Navbar\";\nimport TextForm from \"./Component/TextForm\";\nimport Alert from \"./Component/Alert\";\nimport About from \"./Component/About\";\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\n\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Dark mode enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode enabled\", \"success\");\n    }\n\n    setInterval(() => {\n      document.title = \"Welcome to Texter Editor\";\n    }, 1500);\n\n    setInterval(() => {\n      document.title = \"Texter - Home\";\n    }, 2000);\n  };\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1200);\n  };\n\n  return (\n    <>\n      <Router>\n      <Navbar navHead=\"Texter\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n        <Routes>\n          <Route exact path=\"/\" element={<TextForm textarea=\"Enter your text here\" mode={mode} alertIntoTextArea={showAlert} />\n}/>\n          <Route exact path=\"/about\" element={<About/>}/>\n        </Routes>\n      </Router>\n    \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}